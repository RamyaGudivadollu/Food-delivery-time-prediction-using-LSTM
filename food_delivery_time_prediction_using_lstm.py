# -*- coding: utf-8 -*-
"""Food_delivery_time_prediction_using_LSTM.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1zuSq67ofusY0mFgjf4LL6hD5OMkr7tdi
"""

import pandas as pd
import numpy as np
import plotly.express as px
from sklearn.model_selection import train_test_split
from keras.models import Sequential
from keras.layers import Dense, LSTM

df = pd.read_csv('/content/food_delivery_dataset.csv')
df.head(10)

df.isnull().sum()

"""# **Find the distance btw two locations using Haversine Formula**"""

R = 6371  #The Earth's radius (in km)

def deg_to_rad(degrees):
    return degrees * (np.pi/180)

# The haversine formula
def dist_calculate(lat1, lon1, lat2, lon2):
    d_lat = deg_to_rad(lat2-lat1)
    d_lon = deg_to_rad(lon2-lon1)
    a1 = np.sin(d_lat/2)**2 + np.cos(deg_to_rad(lat1))
    a2 = np.cos(deg_to_rad(lat2)) * np.sin(d_lon/2)**2
    a = a1 * a2
    c = 2 * np.arctan2(np.sqrt(a), np.sqrt(1-a))
    return R * c

# Create distance column & calculate the distance
df['distance'] = np.nan

df['distance'] = df.apply(lambda row: dist_calculate(row['Restaurant_latitude'],
                                                     row['Restaurant_longitude'],
                                                     row['Delivery_location_latitude'],
                                                     row['Delivery_location_longitude']),
                         axis=1)

figure = px.violin(df, x="distance", y="Time_taken(min)",
                   box=True, points="all", title="Violin Plot of Time Taken Over Distance")
figure.show()

figure_line = px.line(df, x="Delivery_person_Age", y="Time_taken(min)",
                      title="Time Taken Over Delivery Partner Age")
figure_line.show()

figure_box = px.box(data_frame=df,
                    x="Delivery_person_Ratings",
                    y="Time_taken(min)",
                    color="distance",
                    title="Box Plot of Time Taken by Delivery Partner Ratings",
                    points="all")

figure_box.show()

fig = px.box(df,
             x="Type_of_vehicle",
             y="Time_taken(min)",
             color="Type_of_order",
             title = "Relationship Between Type of Vehicle and Type of Order")
fig.show()

x = np.array(df[["Delivery_person_Age",
                   "Delivery_person_Ratings",
                   "distance"]])
y = np.array(df[["Time_taken(min)"]])
xtrain, xtest, ytrain, ytest = train_test_split(x, y,
                                                test_size=0.20,
                                                random_state=33)

model = Sequential()
model.add(LSTM(128, return_sequences=True, input_shape= (xtrain.shape[1], 1)))
model.add(LSTM(64, return_sequences=False))
model.add(Dense(25))
model.add(Dense(1))
model.summary()

model.compile(optimizer='adam', loss='mean_squared_error')
model.fit(xtrain, ytrain, batch_size=1, epochs=9)

print("Food Delivery Time Prediction System")
a = int(input("Delivery Partner Age: "))
b = float(input("Previous Delivery Ratings: "))
c = int(input("Total Distance: "))

features = np.array([[a, b, c]])
print("Delivery Time Prediction in Minutes = ", model.predict(features))







